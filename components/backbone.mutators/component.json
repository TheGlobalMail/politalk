{
  "name": "backbone.mutators",
  "version": "0.3.0",
  "description": "Backbone plugin to override getters and setters with logic",
  "homepage": "http://asciidisco.github.com/Backbone.Mutators/index.html",
  "keywords": [
    "backbone",
    "plugin",
    "mutator",
    "getter",
    "setter",
    "client",
    "browser"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/asciidisco/Backbone.Mutators"
  },
  "author": {
    "name": "Sebastian Golasch",
    "email": "public@asciidisco.com"
  },
  "maintainers": [
    {
      "name": "Sebastian Golasch",
      "email": "public@asciidisco.com",
      "url": "asciidisco"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://mit-license.org/"
    }
  ],
  "repositories": [
    {
      "type": "git",
      "url": "https://github.com/asciidisco/Backbone.Mutators"
    }
  ],
  "lib": ".",
  "main": "backbone.mutators.js",
  "devDependencies": {
    "grunt": "~0.3.x"
  },
  "dependencies": {
    "underscore": ">=1.3.1",
    "backbone": ">=0.9.x"
  },
  "readme": "## Backbone.Mutators\nBackbone plugin to override getters and setters with logic\n\n## Build Status, Project Page, Annotated Source & Tests\n[![Build Status](https://secure.travis-ci.org/asciidisco/Backbone.Mutators.png?branch=master)](http://travis-ci.org/asciidisco/Backbone.Mutators)<br /><br />\n[Project Page](http://asciidisco.github.com/Backbone.Mutators/index.html)<br />\n[Docs](http://asciidisco.github.com/Backbone.Mutators/docs/backbone.mutators.html)<br />\n[Tests](http://asciidisco.github.com/Backbone.Mutators/test/index.html)<br />\n[NPM registry](http://search.npmjs.org/#/Backbone.Mutators)\n\n## Introduction\nEver wanted Backbone to have getters and setters you can override with your own logic?\nYes?! Then Backbone.Mutators is the missing tool in your chain...\n\n## Installation\n\nThe plugin itself implements the Universal Module Definition (UMD).\nYou can use it with a CommonJS like loader, or with an AMD loader or via\nvanilla javascript.\n\nThe plugin has two dependencies, underscore.js and backbone.js\n\n### Dowload\nYou can directly download the \n[Development Version](https://raw.github.com/asciidisco/Backbone.Mutators/master/backbone.mutators.js)\nor the\n[Production Version](https://raw.github.com/asciidisco/Backbone.Mutators/master/backbone.mutators.min.js)\nfrom the root folder\n\n### VOLO\n```shell\n$ volo add Backbone.Mutators\n```\n\n### NPM\n```shell\n$ npm install Backbone.Mutators\n```\n\n## Integration\n\n### AMD\n```javascript\n// AMD\nrequire(['underscore', 'backbone', 'path/to/backbone.mutators'], function (_, Backbone, Mutators) {\n  /* Do stuff with Backbone here */\n});\n```\n\n### CommonJS\n```javascript\n// CommonJS\nvar _ = require('underscore');\nvar Backbone = require('backbone');\nvar Mutators = require('backbone.mutators');\n```\n\n### Vanilla JS\n```html\n<!-- Vanilla javascript -->\n<script src=\"path/to/underscore.js\"></script>\n<script src=\"path/to/backbone.js\"></script>\n<script src=\"path/to/backbone.mutators.js\"></script>\n<script>\n\tconsole.log(Backbone.Mutators); // Backbone and the Mutators property are globals\n</script>\n```\n\n## Usage\nSome lines of code explain more then thousand words...\n\n### Basic usage\n```javascript\n var User = Backbone.Model.extend({\n \t// Define mutator properties\n    mutators: {\n        fullname: function () {\n            return this.firstname + ' ' + this.lastname;\n        }\n    },\n    defaults: {\n    \tfirstname: 'Sugar',\n        lastname: 'Daddy'\n    }\n });\n\n var user = new User();\n // use get to get the 'mutated' value \n user.get('fullname') // 'Sugar Daddy'\n // serialize the model and see the 'mutated' value in the resulting JSON\n user.toJSON() // '{firstname: 'Sugar', lastname: 'Daddy', fullname: 'Sugar Daddy'}'\n```\n\n### Override getters\n```javascript\n var State = Backbone.Model.extend({\n \t// Define mutator properties\n    mutators: {\n        status: function () {\n            return this.status === true ? 'Workish' : 'Bad bad error';\n        }\n    },\n    defaults: {\n    \tstatus: true\n    }\n });\n\n var state = new State();\n // use get to get the 'mutated' value \n state.get('status') // 'Workish'\n // serialize the model and see the 'mutated' value in the resulting JSON\n state.toJSON() // '{status: 'Workish'}'\n```\n\n### Use setters\n```javascript\n var User = Backbone.Model.extend({\n \t// Define mutator properties\n    mutators: {\n        fullname: {\n\t\t\tset: function (key, value, options, set) {\n\t\t\t\tvar names = value.split(' ');\n\t\t\t\tthis.set('firstname', names[0], options);\n\t\t\t\tthis.set('lastname', names[1], options);\n\t\t\t},\n        \tget: function () {\n            \treturn this.firstname + ' ' + this.lastname;\n        \t}\n        }\n    },\n    defaults: {\n    \tfirstname: 'Sugar',\n        lastname: 'Daddy'\n    }\n });\n\n var user = new User();\n // use get to get the 'mutated' value \n user.set('fullname', 'Big Mama', {silent: true});\n // serialize the model and see the 'mutated' value in the resulting JSON\n user.get('fullname') // 'Big Mama'\n user.get('firstname'); // 'Big'\n user.get('lastname'); // 'Mama'\n```\n\n### Catch model events\n```javascript\n var User = Backbone.Model.extend({\n    // Define mutator properties\n    mutators: {\n        fullname: {\n            set: function (key, value, options, set) {\n                var names = value.split(' ');\n                this.set('firstname', names[0], options);\n                this.set('lastname', names[1], options);\n            },\n            get: function () {\n                return this.firstname + ' ' + this.lastname;\n            }\n        }\n    },\n    defaults: {\n        firstname: 'Sugar',\n        lastname: 'Daddy'\n    }\n });\n\n var user = new User();\n\n // bind mutator event\n user.bind('mutators:set:fullname', function () {\n    console.log('Somebody sets a full name');\n });\n\n // bind model events\n user.bind('change:firstname', function () {\n    console.log('Somebody changed the first name');\n });\n\n  // bind model events\n user.bind('change:lastname', function () {\n    console.log('Somebody changed the last name');\n });\n\n // use get to get the 'mutated' value \n user.set('fullname', 'Big Mama');\n \n // serialize the model and see the 'mutated' value in the resulting JSON\n user.get('fullname') // 'Big Mama'\n user.get('firstname'); // 'Big'\n user.get('lastname'); // 'Mama'\n```\n\n### Silence mutator events (while keeping the model events fired)\n```javascript\n var User = Backbone.Model.extend({\n    // Define mutator properties\n    mutators: {\n        fullname: {\n            set: function (key, value, options, set) {\n                var names = value.split(' ');\n                this.set('firstname', names[0], options);\n                this.set('lastname', names[1], options);\n            },\n            get: function () {\n                return this.firstname + ' ' + this.lastname;\n            }\n        }\n    },\n    defaults: {\n        firstname: 'Sugar',\n        lastname: 'Daddy'\n    }\n });\n\n var user = new User();\n\n // bind mutator event\n // will never be run\n user.bind('mutators:set:fullname', function () {\n    console.log('Somebody sets a full name');\n });\n\n // bind model events\n // will still run\n user.bind('change:firstname', function () {\n    console.log('Somebody changed the first name');\n });\n\n // bind model events\n // will still run\n user.bind('change:lastname', function () {\n    console.log('Somebody changed the last name');\n });\n\n // use get to get the 'mutated' value \n user.set('fullname', 'Big Mama', {mutators: {silence: true}});\n \n // serialize the model and see the 'mutated' value in the resulting JSON\n user.get('fullname') // 'Big Mama'\n user.get('firstname'); // 'Big'\n user.get('lastname'); // 'Mama'\n```\n\n### Use mutated setters and call the original setter within\n```javascript\n var Spicy = Backbone.Model.extend({\n    // Define mutator properties\n    mutators: {\n        fullname: {\n            set: function (key, value, options, set) {\n                // call the original setter with the lowercased value\n                set(key, value.toLowerCase(), options);\n            }\n        }\n    },\n    defaults: {\n        iAcceptOnlyLowercaseStuff: 'sugar'\n    }\n });\n\n var spicy = new Spicy();\n // use get to get the 'mutated' value \n spicy.set('iAcceptOnlyLowercaseStuff', 'SALT');\n spicy.get('iAcceptOnlyLowercaseStuff') // 'salt'\n```\n\n var spicy = new Spicy();\n // use get to get the 'mutated' value \n spicy.set('iAcceptOnlyLowercaseStuff', 'SALT');\n spicy.get('iAcceptOnlyLowercaseStuff') // 'salt'\n```\n\n### Define multiple mutators\n```javascript\n var User = Backbone.Model.extend({\n \t// Define mutator properties\n    mutators: {\n        fullname: {\n\t\t\tset: function (key, value, options, set) {\n\t\t\t\tvar names = value.split(' ');\n\t\t\t\tthis.set('firstname', names[0], options);\n\t\t\t\tthis.set('lastname', names[1], options);\n\t\t\t}\n        \tget: function () {\n            \treturn this.firstname + ' ' + this.lastname;\n        \t}\n        },\n        password: function () {\n    \t\treturn md5(this.password);\n    \t}\n    },\n    defaults: {\n    \tfirstname: 'Sugar',\n        lastname: 'Daddy'\n    }\n });\n```\n\n## Further reading\nJames Brown ([@ibjhb](https://github.com/ibjhb/Exploring-Backbone.Mutators))\nhas written a blog article about Mutators ([Exploring Backbone.Mutators](http://ja.mesbrown.com/2012/03/exploring-backbone-mutators-plugin/))\n\n## Changelog\n\n### 0.3.0\n+ Removed the Cake based build process and moved to grunt\n+ Mutators now integrates itself to backbone, no more manual extending needed\n+ Added the {mutator: {silent: true}} option to prevent mutator set events from firering\n+ Added unit tests for the new features\n+ Moved from jslint to jshint\n+ Tweaked docs\n+ Removed not needed jquery and qunit-logging submodule / npm dependencies\n\n### 0.2.0\n+ Added the original Backbone.Model.set function as a fourth paramter for the mutated set\n+ Added a 'mutators:set:{{YOUR_MUTATOR_PROPERTY}}' event when setting mutated properties\n+ Added unit tests for the new features\n+ Extended/fixed documentation\n+ Added inline version tag [NOTE: Version 0.2.0 is fully backwards compatible]\n\n### 0.1.0\n+ Initial Release",
  "readmeFilename": "README.md",
  "_id": "Backbone.Mutators@0.3.0"
}